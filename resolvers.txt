query.getPublicArtWithinBoundingBox

#**
The 'params' key accepts any valid Elasticsearch DSL expression.
You must replace the <index>, <type>, and <field> placeholders with actual values.
*#
{
  "version":"2017-02-28",
  "operation":"GET",
  "path":"/public_art/_doc/_search",
  "params":{
      "headers":{},
      "queryString":{},
      "body":{
          "from":0,
          "size":$util.defaultIfNull($ctx.args.limit, 10),
          "query" : {
              "bool" : {
              #if($util.isNullOrEmpty($ctx.args.type))
                  "must" : { "match_all" : {}},
              #else
              #** match_exactly? *#
                  "must" : { "match" : { "type" : "$ctx.args.type" } },
              #end
                  "filter" : {
                      "geo_bounding_box" : {
                          "location" : {
                              "top_right" : {
                                  "lat" : "$context.arguments.top_right_gps.lat",
                                  "lon" : "$context.arguments.top_right_gps.lng"
                              },
                              "bottom_left" : {
                                  "lat" : "$context.arguments.bottom_left_gps.lat",
                                  "lon" : "$context.arguments.bottom_left_gps.lng"
                              }
                          }
                      }
                  }
              }
          }
      }
  }
}

#**
    $context.result contains the full response of the Elasticsearch query.
    Select a subset of information or iterate through hits to return the
    same shape as is expected by this field.
*#
[
    #foreach($entry in $context.result.hits.hits)
        ## $velocityCount starts at 1 and increments with the #foreach loop **
        #if( $velocityCount > 1 ) , #end
        $util.toJson($entry.get("_source"))
    #end
]

mutation.flagLocation

## Below example shows how to create an object from all provided GraphQL arguments
## The primary key of the obejct is a randomly generated UUD using the $util.autoId() utility
## Other utilities include $util.matches() for regular expressions, $util.time.nowISO8601() or
##   $util.time.nowEpochMilliSeconds() for timestamps, and even List or Map helpers like
##   $util.list.copyAndRetainAll() $util.map.copyAndRemoveAllKeys() for shallow copies
## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-context-reference.html#utility-helpers-in-util

{
    "version" : "2017-02-28",
    "operation" : "PutItem",
    "key" : {
        ## If object "id" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)
        "id": $util.dynamodb.toDynamoDBJson($util.autoId()),
        ## "name": $util.dynamodb.toDynamoDBJson($ctx.args.input.name),
    },
    "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args.input)
}



