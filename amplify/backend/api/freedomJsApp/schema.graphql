type Location @aws_api_key @aws_cognito_user_pools{
    lat: Float
    lon: Float
}
input LocationInput {
    lat: Float
    lon: Float
}
input BoundingBoxInput {
    top_right_gps: LocationInput!,
    bottom_left_gps: LocationInput!,
    start_date: AWSDate,
    end_date: AWSDate,
    limit: Int
}
type DateRange {
    start: AWSDate
    end: AWSDate
}

enum LocationType {
    event
    publicArt
}
enum PublicArtType {
    mural
    sculpture
}

enum EventType {
    advocacy
    art
    athletics
    comedy
    dance
    education # TODO: sunset this
    family
    film
    food # only if food is free or its an educational thing, or there is something else included
    history
    literature
    lgbtq
    music
    philosophy
    science
    shopping
    theater
}

type PublicArt @model @searchable @aws_api_key @aws_cognito_user_pools{
    id: ID!
    location: Location!
    name: String!
    description: String
    type: PublicArtType!

    # TODO: need ids...?
    photos: [AWSURL] 

    # Some public art is up for a limited time.
    permanent: Boolean!
    date_range: DateRange
}

type Event @model @searchable @aws_api_key @aws_cognito_user_pools {
    id: ID!
    location: Location!
    name: String!
    description: String!
    types: [EventType]
    host: String
    source: String
    website: AWSURL
    photos: [AWSURL]
    dates: [AWSDate]! # TODO: should be array of date ranges (str?)
    times: [AWSTime] # If just one, true for all dates. Otherwise, should be 1-1
    location_description: String
    rsvp: Boolean # TODO: hard to parse for
}

type Reported @model {
    id: ID
    art_id: ID! # TODO: should be 'location_id'
    # type: LocationType! TODO: add this
    reason: String!
    reason_continued: String
}

type Mutation {
    addPhoto(location_id: String!, url:AWSURL!): PublicArt
}

type Query @aws_api_key{
	getPublicArtWithinBoundingBox(
        # TODO: This includes option for date (not yet implemented)
        search: BoundingBoxInput!,
        permanent: Boolean!,
		type: PublicArtType
	): [PublicArt]

    getEventWithinBoundingBox(
        search: BoundingBoxInput!
        # start_time: AWSTime!,
        # end_time: AWSTime!,

    ): [Event]
}